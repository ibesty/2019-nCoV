{"version":3,"sources":["components/timeline/index.module.scss","pages/index/index.module.scss","components/timeline/index.jsx","pages/index/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","news","className","styles","map","item","Item","key","timestamp","dot","dayjs","format","message","getCityCoord","name","city","window","citys","find","c","indexOf","lnglat","setCitysCount","spots","s","findedCity","to","symbolSize","num","push","from","value","Boolean","location","hostname","match","ReactDOM","render","useState","setSpots","setNews","status","setStatus","fetchData","useCallback","a","async","axois","post","data","errcode","hotspot","console","error","useEffect","getOption","routes","spot","option","backgroundColor","legend","show","orient","top","left","textStyle","color","geo","label","emphasis","roam","itemStyle","normal","areaColor","borderColor","series","type","coordinateSystem","zlevel","rippleEffect","brushType","position","formatter","fontSize","showEffectOn","large","effect","constantSpeed","symbol","trailLength","lineStyle","echarts","graphic","LinearGradient","offset","width","opacity","curveness","id","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f893b20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeline-wrapper\":\"timeline_timeline-wrapper__2TPu1\",\"dot\":\"timeline_dot__6Z8eZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"index\":\"index_index__3ejdo\",\"header\":\"index_header__9MThl\",\"title\":\"index_title__1RUdl\",\"status\":\"index_status__1FFP7\",\"map\":\"index_map__3bEWK\"};","import React from 'react'\nimport dayjs from 'dayjs'\nimport Timeline from 'rsuite/lib/Timeline'\nimport 'rsuite/lib/Timeline/styles'\n\nimport styles from './index.module.scss'\n\nexport default ({ news = [] }) => {\n  return (\n    <div className={styles['timeline-wrapper']}>\n      <Timeline>\n        {\n          news.map(item => (\n            <Timeline.Item key={item.timestamp} dot={<div className={styles['dot']}></div>}>{dayjs(item.timestamp * 1000).format('YYYY年MM月DD日')} {item.message}</Timeline.Item>\n          ))\n        }\n      </Timeline>\n    </div>\n  )\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport axois from 'axios'\n\nimport echarts from 'echarts'\nimport 'echarts/map/js/china'\nimport ReactEcharts from \"echarts-for-react\"\n\nimport styles from './index.module.scss'\n\n// import mockGet from './data'\n\nimport Timeline from '../../components/timeline/index'\n\nconst api = 'https://api.st.link/angelia/2019ncov'\n\nfunction getCityCoord(name) {\n  const city = window.citys.find(c => c.name.indexOf(name) === 0)\n  if (city) {\n    return city.lnglat\n  }\n  return []\n}\n\nfunction setCitysCount(spots) {\n  let citys = []\n  for (let s of spots) {\n    const findedCity = citys.find(c => c.name === s.to)\n    if (findedCity) {\n      findedCity.symbolSize = s.num\n    } else {\n      citys.push({\n        name: s.from,\n        value: getCityCoord(s.from),\n        \"symbolSize\": 2,\n        \"itemStyle\": {\n          \"normal\": {\n            \"color\": \"red\"\n          }\n        }\n      })\n    }\n    citys.push({\n      name: s.to,\n      value: getCityCoord(s.to),\n      \"symbolSize\": s.num,\n      \"itemStyle\": {\n        \"normal\": {\n          \"color\": \"red\"\n        }\n      }\n    })\n  }\n\n  return citys\n}\n\nexport default () => {\n  const [spots, setSpots] = useState([])\n  const [news, setNews] = useState([])\n  const [status, setStatus] = useState({})\n\n  const fetchData = useCallback(async () => {\n    try {\n      const { data } = await axois.post(api)\n      // const data = await mockGet()\n      // console.log(data)\n      if (data.errcode === 0) {\n        const { news, hotspot, status } = data\n        setNews(news)\n        setSpots(hotspot)\n        setStatus(status)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  })\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  const getOption = useCallback((hotspot = []) => {\n    const routes = hotspot.map(spot => {\n      return {\n        \"fromName\": spot.from,\n        \"toName\": spot.to,\n        \"coords\": [\n          getCityCoord(spot.from),\n          getCityCoord(spot.to)\n        ]\n      }\n    });\n\n    const citys = setCitysCount(spots)\n    // console.log(citys)\n\n    let option = {\n      backgroundColor: '#404a59',\n      // title: {\n      //   text: '武汉新型冠状病毒热点追踪',\n      //   left: 'center',\n      //   textStyle: {\n      //     color: '#fff'\n      //   }\n      // },\n      legend: {\n        show: false,\n        orient: 'vertical',\n        top: 'bottom',\n        left: 'right',\n        data: ['地点', '线路'],\n        textStyle: {\n          color: '#fff'\n        }\n      },\n      geo: {\n        map: 'china',\n        label: {\n          // normal: {\n          //   show: true,\n          //   color: '#999'\n          // },\n          emphasis: {\n            show: true,\n            color: '#fff'\n          }\n        },\n\n        roam: true,\n        itemStyle: {\n          normal: {\n            areaColor: '#323c48',\n            borderColor: '#404a59'\n          },\n          emphasis: {\n            areaColor: '#2a333d'\n          }\n        }\n      }\n    }\n\n    // if (hotspot.length > 0) {\n    // console.log(citys)\n    option.series = [{\n      name: '地点',\n      type: 'effectScatter',\n      coordinateSystem: 'geo',\n      zlevel: 2,\n      rippleEffect: {\n        brushType: 'stroke'\n      },\n      label: {\n        normal: {\n          show: true,\n          position: 'right',\n          formatter: '{b}',\n          fontSize: 6\n        },\n        // emphasis: {\n        //   show: true,\n        //   position: 'right',\n        //   formatter: '{a}'\n        // }\n      },\n      symbolSize: 2,\n      showEffectOn: 'render',\n      itemStyle: {\n        normal: {\n          color: '#46bee9'\n        }\n      },\n      data: citys\n    }, {\n      name: '线路',\n      type: 'lines',\n      coordinateSystem: 'geo',\n      zlevel: 2,\n      large: true,\n      effect: {\n        show: true,\n        constantSpeed: 30,\n        symbol: 'pin',\n        symbolSize: 3,\n        trailLength: 0,\n      },\n      lineStyle: {\n        normal: {\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: '#F58158'\n          }, {\n            offset: 1,\n            color: 'red'\n          }], false),\n          width: 1,\n          opacity: 0.2,\n          curveness: 0.1\n        }\n      },\n      data: routes\n    }]\n    // }\n\n    // console.log(routes)\n    // console.log(option)\n    return option\n  }, [spots])\n\n  return (\n    <div className={styles['index']}>\n    <div className={styles['header']}>\n      <div className={styles['title']}>武汉新型冠状病毒肺炎热点追踪</div>\n      <div className={styles['status']}>\n        <div>确诊: {status['确诊']}</div>\n        <div>疑似: {status['疑似']}</div>\n        <div>死亡: {status['死亡']}</div>\n      </div>\n    </div>\n      <ReactEcharts\n        id=\"map\" className={styles['map']}\n        option={getOption(spots)}\n      />\n      <Timeline news={news}/>\n      {/* <div id=\"map\" className={styles['map']}></div> */}\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/index/index';\nimport * as serviceWorker from './serviceWorker';\nimport 'rsuite/dist/styles/rsuite-default.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}